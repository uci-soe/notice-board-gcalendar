import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import isToday from 'date-fns/is_today';
import './StudentSchedule.css';
import StudentScheduleEvent from './StudentScheduleEvent';
import { getDate, getEvents, MINUTE } from './lib/utils';
const propTypes = {
  range: PropTypes.number,
  timeMin: PropTypes.instanceOf(Date),
  timeMax: PropTypes.instanceOf(Date),
  children: PropTypes.any
};
const defaultProps = {
  range: 2,
  timeMin: getDate(-1),
  timeMax: getDate(1),
  updateTime: MINUTE * 10,
  apiKey: null,
  calendarID: null
};

function StudentSchedule(props) {
  const [events, setEvents] = useState([]);
  useEffect(() => {
    let update;

    const updateFunc = () => {
      getEvents(props.timeMin, props.timeMax, props.calendarID, props.apiKey).then(events => setEvents(events));
      update = setTimeout(() => {
        updateFunc();
      }, props.updateTime);
    };

    updateFunc();
    return () => {
      clearTimeout(update);
    };
  }, [props.timeMin, props.timeMax, props.updateTime, props.calendarID, props.apiKey]);
  const eventsToday = events.filter(e => isToday(e.start.dateTime));
  const Event = props.children || StudentScheduleEvent;
  return React.createElement("div", {
    className: "calendar-events"
  }, eventsToday.map((e, i) => Event(e, i)));
}

StudentSchedule.propTypes = propTypes;
StudentSchedule.defaultProps = defaultProps;
export default StudentSchedule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL1N0dWRlbnRTY2hlZHVsZS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiUHJvcFR5cGVzIiwiaXNUb2RheSIsIlN0dWRlbnRTY2hlZHVsZUV2ZW50IiwiZ2V0RGF0ZSIsImdldEV2ZW50cyIsIk1JTlVURSIsInByb3BUeXBlcyIsInJhbmdlIiwibnVtYmVyIiwidGltZU1pbiIsImluc3RhbmNlT2YiLCJEYXRlIiwidGltZU1heCIsImNoaWxkcmVuIiwiYW55IiwiZGVmYXVsdFByb3BzIiwidXBkYXRlVGltZSIsImFwaUtleSIsImNhbGVuZGFySUQiLCJTdHVkZW50U2NoZWR1bGUiLCJwcm9wcyIsImV2ZW50cyIsInNldEV2ZW50cyIsInVwZGF0ZSIsInVwZGF0ZUZ1bmMiLCJ0aGVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImV2ZW50c1RvZGF5IiwiZmlsdGVyIiwiZSIsInN0YXJ0IiwiZGF0ZVRpbWUiLCJFdmVudCIsIm1hcCIsImkiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsSUFBZUMsU0FBZixFQUEwQkMsUUFBMUIsUUFBeUMsT0FBekM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixtQkFBcEI7QUFFQSxPQUFPLHVCQUFQO0FBQ0EsT0FBT0Msb0JBQVAsTUFBaUMsd0JBQWpDO0FBQ0EsU0FBUUMsT0FBUixFQUFpQkMsU0FBakIsRUFBNEJDLE1BQTVCLFFBQXlDLGFBQXpDO0FBRUEsTUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxLQUFLLEVBQUVQLFNBQVMsQ0FBQ1EsTUFERDtBQUVoQkMsRUFBQUEsT0FBTyxFQUFFVCxTQUFTLENBQUNVLFVBQVYsQ0FBcUJDLElBQXJCLENBRk87QUFHaEJDLEVBQUFBLE9BQU8sRUFBRVosU0FBUyxDQUFDVSxVQUFWLENBQXFCQyxJQUFyQixDQUhPO0FBSWhCRSxFQUFBQSxRQUFRLEVBQUViLFNBQVMsQ0FBQ2M7QUFKSixDQUFsQjtBQU9BLE1BQU1DLFlBQVksR0FBRztBQUNuQlIsRUFBQUEsS0FBSyxFQUFFLENBRFk7QUFFbkJFLEVBQUFBLE9BQU8sRUFBRU4sT0FBTyxDQUFDLENBQUMsQ0FBRixDQUZHO0FBR25CUyxFQUFBQSxPQUFPLEVBQUVULE9BQU8sQ0FBQyxDQUFELENBSEc7QUFJbkJhLEVBQUFBLFVBQVUsRUFBRVgsTUFBTSxHQUFHLEVBSkY7QUFLbkJZLEVBQUFBLE1BQU0sRUFBRSxJQUxXO0FBTW5CQyxFQUFBQSxVQUFVLEVBQUU7QUFOTyxDQUFyQjs7QUFTQSxTQUFTQyxlQUFULENBQXlCQyxLQUF6QixFQUFnQztBQUM5QixRQUFNLENBQUNDLE1BQUQsRUFBU0MsU0FBVCxJQUFzQnZCLFFBQVEsQ0FBQyxFQUFELENBQXBDO0FBRUFELEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBQ2QsUUFBSXlCLE1BQUo7O0FBQ0EsVUFBTUMsVUFBVSxHQUFHLE1BQU07QUFDdkJwQixNQUFBQSxTQUFTLENBQUNnQixLQUFLLENBQUNYLE9BQVAsRUFBZ0JXLEtBQUssQ0FBQ1IsT0FBdEIsRUFBK0JRLEtBQUssQ0FBQ0YsVUFBckMsRUFBaURFLEtBQUssQ0FBQ0gsTUFBdkQsQ0FBVCxDQUNHUSxJQURILENBQ1FKLE1BQU0sSUFBSUMsU0FBUyxDQUFDRCxNQUFELENBRDNCO0FBR0FFLE1BQUFBLE1BQU0sR0FBR0csVUFBVSxDQUFDLE1BQU07QUFDeEJGLFFBQUFBLFVBQVU7QUFDWCxPQUZrQixFQUVoQkosS0FBSyxDQUFDSixVQUZVLENBQW5CO0FBR0QsS0FQRDs7QUFTQVEsSUFBQUEsVUFBVTtBQUVWLFdBQU8sTUFBTTtBQUNYRyxNQUFBQSxZQUFZLENBQUNKLE1BQUQsQ0FBWjtBQUNELEtBRkQ7QUFHRCxHQWhCUSxFQWdCTixDQUFDSCxLQUFLLENBQUNYLE9BQVAsRUFBZ0JXLEtBQUssQ0FBQ1IsT0FBdEIsRUFBK0JRLEtBQUssQ0FBQ0osVUFBckMsRUFBaURJLEtBQUssQ0FBQ0YsVUFBdkQsRUFBbUVFLEtBQUssQ0FBQ0gsTUFBekUsQ0FoQk0sQ0FBVDtBQWtCQSxRQUFNVyxXQUFXLEdBQUdQLE1BQU0sQ0FBQ1EsTUFBUCxDQUFlQyxDQUFELElBQU83QixPQUFPLENBQUM2QixDQUFDLENBQUNDLEtBQUYsQ0FBUUMsUUFBVCxDQUE1QixDQUFwQjtBQUNBLFFBQU1DLEtBQUssR0FBR2IsS0FBSyxDQUFDUCxRQUFOLElBQWtCWCxvQkFBaEM7QUFDQSxTQUNFO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNHMEIsV0FBVyxDQUFDTSxHQUFaLENBQWdCLENBQUNKLENBQUQsRUFBSUssQ0FBSixLQUFVRixLQUFLLENBQUNILENBQUQsRUFBSUssQ0FBSixDQUEvQixDQURILENBREY7QUFLRDs7QUFFRGhCLGVBQWUsQ0FBQ2IsU0FBaEIsR0FBNEJBLFNBQTVCO0FBQ0FhLGVBQWUsQ0FBQ0osWUFBaEIsR0FBK0JBLFlBQS9CO0FBRUEsZUFBZUksZUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdCwgdXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuaW1wb3J0IGlzVG9kYXkgZnJvbSAnZGF0ZS1mbnMvaXNfdG9kYXknO1xyXG5cclxuaW1wb3J0ICcuL1N0dWRlbnRTY2hlZHVsZS5jc3MnO1xyXG5pbXBvcnQgU3R1ZGVudFNjaGVkdWxlRXZlbnQgZnJvbSAnLi9TdHVkZW50U2NoZWR1bGVFdmVudCc7XHJcbmltcG9ydCB7Z2V0RGF0ZSwgZ2V0RXZlbnRzLCBNSU5VVEV9IGZyb20gJy4vbGliL3V0aWxzJztcclxuXHJcbmNvbnN0IHByb3BUeXBlcyA9IHtcclxuICByYW5nZTogUHJvcFR5cGVzLm51bWJlcixcclxuICB0aW1lTWluOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcclxuICB0aW1lTWF4OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxyXG59O1xyXG5cclxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xyXG4gIHJhbmdlOiAyLFxyXG4gIHRpbWVNaW46IGdldERhdGUoLTEpLFxyXG4gIHRpbWVNYXg6IGdldERhdGUoMSksXHJcbiAgdXBkYXRlVGltZTogTUlOVVRFICogMTAsXHJcbiAgYXBpS2V5OiBudWxsLFxyXG4gIGNhbGVuZGFySUQ6IG51bGxcclxufTtcclxuXHJcbmZ1bmN0aW9uIFN0dWRlbnRTY2hlZHVsZShwcm9wcykge1xyXG4gIGNvbnN0IFtldmVudHMsIHNldEV2ZW50c10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBsZXQgdXBkYXRlO1xyXG4gICAgY29uc3QgdXBkYXRlRnVuYyA9ICgpID0+IHtcclxuICAgICAgZ2V0RXZlbnRzKHByb3BzLnRpbWVNaW4sIHByb3BzLnRpbWVNYXgsIHByb3BzLmNhbGVuZGFySUQsIHByb3BzLmFwaUtleSlcclxuICAgICAgICAudGhlbihldmVudHMgPT4gc2V0RXZlbnRzKGV2ZW50cykpO1xyXG5cclxuICAgICAgdXBkYXRlID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlRnVuYygpO1xyXG4gICAgICB9LCBwcm9wcy51cGRhdGVUaW1lKTtcclxuICAgIH07XHJcblxyXG4gICAgdXBkYXRlRnVuYygpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh1cGRhdGUpO1xyXG4gICAgfVxyXG4gIH0sIFtwcm9wcy50aW1lTWluLCBwcm9wcy50aW1lTWF4LCBwcm9wcy51cGRhdGVUaW1lLCBwcm9wcy5jYWxlbmRhcklELCBwcm9wcy5hcGlLZXldKTtcclxuXHJcbiAgY29uc3QgZXZlbnRzVG9kYXkgPSBldmVudHMuZmlsdGVyKChlKSA9PiBpc1RvZGF5KGUuc3RhcnQuZGF0ZVRpbWUpKTtcclxuICBjb25zdCBFdmVudCA9IHByb3BzLmNoaWxkcmVuIHx8IFN0dWRlbnRTY2hlZHVsZUV2ZW50O1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT0nY2FsZW5kYXItZXZlbnRzJz5cclxuICAgICAge2V2ZW50c1RvZGF5Lm1hcCgoZSwgaSkgPT4gRXZlbnQoZSwgaSkpfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG5cclxuU3R1ZGVudFNjaGVkdWxlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcclxuU3R1ZGVudFNjaGVkdWxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN0dWRlbnRTY2hlZHVsZTsiXX0=