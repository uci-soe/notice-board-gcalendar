import { format, isTomorrow, withinRange, addMinutes, subMinutes } from "./lib/utils.js";
import React from 'react';

function displayTime(startTime, endTime) {
  return startTime ? `${format(startTime, "h:mm")} - ${format(endTime, "h:mm")}` : `All Day`;
}

export default function (e, i) {
  const now = new Date(Date.now());
  const startShift = e.start.dateTime;
  const endShift = e.end.dateTime;
  const preShift = subMinutes(startShift, 15);
  const postShift = addMinutes(endShift, 15);
  let context = '';

  if (withinRange(now, preShift, startShift)) {
    context = 'in-soon';
  } else if (withinRange(now, startShift, endShift)) {
    context = 'in-now';
  } else if (withinRange(now, endShift, postShift)) {
    context = 'just-left';
  } else if (isTomorrow(startShift)) {
    context = 'in-tmr';
  } else if (now > postShift) {
    context = 'gone';
  } else {
    context = 'none';
  }

  return React.createElement("div", {
    className: `student-event ${context} ${i + 1}`,
    key: i
  }, React.createElement("div", {
    className: "student-name"
  }, e.summary), React.createElement("div", {
    className: "time"
  }, displayTime(e.start.dateTime, e.end.dateTime)));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL1N0dWRlbnRTY2hlZHVsZUV2ZW50LmpzIl0sIm5hbWVzIjpbImZvcm1hdCIsImlzVG9tb3Jyb3ciLCJ3aXRoaW5SYW5nZSIsImFkZE1pbnV0ZXMiLCJzdWJNaW51dGVzIiwiUmVhY3QiLCJkaXNwbGF5VGltZSIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJlIiwiaSIsIm5vdyIsIkRhdGUiLCJzdGFydFNoaWZ0Iiwic3RhcnQiLCJkYXRlVGltZSIsImVuZFNoaWZ0IiwiZW5kIiwicHJlU2hpZnQiLCJwb3N0U2hpZnQiLCJjb250ZXh0Iiwic3VtbWFyeSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsTUFBUixFQUFnQkMsVUFBaEIsRUFBNEJDLFdBQTVCLEVBQXlDQyxVQUF6QyxFQUFxREMsVUFBckQsUUFBc0UsZ0JBQXRFO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixPQUFsQjs7QUFFQSxTQUFTQyxXQUFULENBQXFCQyxTQUFyQixFQUFnQ0MsT0FBaEMsRUFBeUM7QUFDdkMsU0FBT0QsU0FBUyxHQUFJLEdBQUVQLE1BQU0sQ0FBQ08sU0FBRCxFQUFZLE1BQVosQ0FBb0IsTUFBS1AsTUFBTSxDQUFDUSxPQUFELEVBQVUsTUFBVixDQUFrQixFQUE3RCxHQUFrRSxTQUFsRjtBQUNEOztBQUVELGVBQWUsVUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQzdCLFFBQU1DLEdBQUcsR0FBRyxJQUFJQyxJQUFKLENBQVNBLElBQUksQ0FBQ0QsR0FBTCxFQUFULENBQVo7QUFDQSxRQUFNRSxVQUFVLEdBQUdKLENBQUMsQ0FBQ0ssS0FBRixDQUFRQyxRQUEzQjtBQUNBLFFBQU1DLFFBQVEsR0FBR1AsQ0FBQyxDQUFDUSxHQUFGLENBQU1GLFFBQXZCO0FBQ0EsUUFBTUcsUUFBUSxHQUFHZCxVQUFVLENBQUNTLFVBQUQsRUFBYSxFQUFiLENBQTNCO0FBQ0EsUUFBTU0sU0FBUyxHQUFHaEIsVUFBVSxDQUFDYSxRQUFELEVBQVcsRUFBWCxDQUE1QjtBQUNBLE1BQUlJLE9BQU8sR0FBRyxFQUFkOztBQUVBLE1BQUlsQixXQUFXLENBQUNTLEdBQUQsRUFBTU8sUUFBTixFQUFnQkwsVUFBaEIsQ0FBZixFQUE0QztBQUMxQ08sSUFBQUEsT0FBTyxHQUFHLFNBQVY7QUFDRCxHQUZELE1BRU8sSUFBSWxCLFdBQVcsQ0FBQ1MsR0FBRCxFQUFNRSxVQUFOLEVBQWtCRyxRQUFsQixDQUFmLEVBQTRDO0FBQ2pESSxJQUFBQSxPQUFPLEdBQUcsUUFBVjtBQUNELEdBRk0sTUFFQSxJQUFJbEIsV0FBVyxDQUFDUyxHQUFELEVBQU1LLFFBQU4sRUFBZ0JHLFNBQWhCLENBQWYsRUFBMkM7QUFDaERDLElBQUFBLE9BQU8sR0FBRyxXQUFWO0FBQ0QsR0FGTSxNQUVBLElBQUluQixVQUFVLENBQUNZLFVBQUQsQ0FBZCxFQUE0QjtBQUNqQ08sSUFBQUEsT0FBTyxHQUFHLFFBQVY7QUFDRCxHQUZNLE1BRUEsSUFBSVQsR0FBRyxHQUFHUSxTQUFWLEVBQXFCO0FBQzFCQyxJQUFBQSxPQUFPLEdBQUcsTUFBVjtBQUNELEdBRk0sTUFFQTtBQUNMQSxJQUFBQSxPQUFPLEdBQUcsTUFBVjtBQUNEOztBQUVELFNBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBRyxpQkFBZ0JBLE9BQVEsSUFBR1YsQ0FBQyxHQUFHLENBQUUsRUFBbEQ7QUFBcUQsSUFBQSxHQUFHLEVBQUVBO0FBQTFELEtBQ0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQ0dELENBQUMsQ0FBQ1ksT0FETCxDQURGLEVBS0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQ0dmLFdBQVcsQ0FBQ0csQ0FBQyxDQUFDSyxLQUFGLENBQVFDLFFBQVQsRUFBbUJOLENBQUMsQ0FBQ1EsR0FBRixDQUFNRixRQUF6QixDQURkLENBTEYsQ0FERjtBQVdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmb3JtYXQsIGlzVG9tb3Jyb3csIHdpdGhpblJhbmdlLCBhZGRNaW51dGVzLCBzdWJNaW51dGVzfSBmcm9tIFwiLi9saWIvdXRpbHMuanNcIjtcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmZ1bmN0aW9uIGRpc3BsYXlUaW1lKHN0YXJ0VGltZSwgZW5kVGltZSkge1xyXG4gIHJldHVybiBzdGFydFRpbWUgPyBgJHtmb3JtYXQoc3RhcnRUaW1lLCBcImg6bW1cIil9IC0gJHtmb3JtYXQoZW5kVGltZSwgXCJoOm1tXCIpfWAgOiBgQWxsIERheWA7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChlLCBpKSB7XHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoRGF0ZS5ub3coKSk7XHJcbiAgY29uc3Qgc3RhcnRTaGlmdCA9IGUuc3RhcnQuZGF0ZVRpbWU7XHJcbiAgY29uc3QgZW5kU2hpZnQgPSBlLmVuZC5kYXRlVGltZTtcclxuICBjb25zdCBwcmVTaGlmdCA9IHN1Yk1pbnV0ZXMoc3RhcnRTaGlmdCwgMTUpO1xyXG4gIGNvbnN0IHBvc3RTaGlmdCA9IGFkZE1pbnV0ZXMoZW5kU2hpZnQsIDE1KTtcclxuICBsZXQgY29udGV4dCA9ICcnO1xyXG5cclxuICBpZiAod2l0aGluUmFuZ2Uobm93LCBwcmVTaGlmdCwgc3RhcnRTaGlmdCkpIHtcclxuICAgIGNvbnRleHQgPSAnaW4tc29vbic7XHJcbiAgfSBlbHNlIGlmICh3aXRoaW5SYW5nZShub3csIHN0YXJ0U2hpZnQsIGVuZFNoaWZ0KSkge1xyXG4gICAgY29udGV4dCA9ICdpbi1ub3cnO1xyXG4gIH0gZWxzZSBpZiAod2l0aGluUmFuZ2Uobm93LCBlbmRTaGlmdCwgcG9zdFNoaWZ0KSkge1xyXG4gICAgY29udGV4dCA9ICdqdXN0LWxlZnQnO1xyXG4gIH0gZWxzZSBpZiAoaXNUb21vcnJvdyhzdGFydFNoaWZ0KSkge1xyXG4gICAgY29udGV4dCA9ICdpbi10bXInO1xyXG4gIH0gZWxzZSBpZiAobm93ID4gcG9zdFNoaWZ0KSB7XHJcbiAgICBjb250ZXh0ID0gJ2dvbmUnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb250ZXh0ID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtgc3R1ZGVudC1ldmVudCAke2NvbnRleHR9ICR7aSArIDF9YH0ga2V5PXtpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9J3N0dWRlbnQtbmFtZSc+XHJcbiAgICAgICAge2Uuc3VtbWFyeX1cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbWVcIj5cclxuICAgICAgICB7ZGlzcGxheVRpbWUoZS5zdGFydC5kYXRlVGltZSwgZS5lbmQuZGF0ZVRpbWUpfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn0iXX0=