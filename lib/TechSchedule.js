import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { setDays, getEvents, getDate, MINUTE } from './lib/utils';
import './TechSchedule.css';
import TechScheduleEvent from './TechScheduleEvent';
import CalendarNoEvent from './CalendarNoEvent';
const propTypes = {
  range: PropTypes.number,
  limit: PropTypes.number,
  timeMin: PropTypes.instanceOf(Date),
  timeMax: PropTypes.instanceOf(Date),
  children: PropTypes.any,
  noEvent: PropTypes.any
};
const defaultProps = {
  range: 2,
  limit: -1,
  timeMin: getDate(0),
  timeMax: getDate(14),
  updateTime: MINUTE * 10,
  apiKey: null,
  calendarID: null,
  noEvent: null
};

function TechSchedule(props) {
  const [events, setEvents] = useState([]);
  useEffect(() => {
    let update;

    const updateFunc = () => {
      getEvents(props.timeMin, props.timeMax, props.calendarID, props.apiKey).then(events => setEvents(events));
      update = setTimeout(() => {
        updateFunc();
      }, props.updateTime);
    };

    updateFunc();
    return () => {
      clearTimeout(update);
    };
  }, [props.timeMin, props.timeMax, props.updateTime, props.calendarID, props.apiKey]);
  const Event = props.children || TechScheduleEvent;
  const noEvent = props.noEvent || CalendarNoEvent;
  let eventsTodayAndTmr = setDays(events, props.range);

  if (props.limit >= 0) {
    eventsTodayAndTmr = eventsTodayAndTmr.slice(0, props.limit);
  }

  return React.createElement("div", {
    className: "calendar-events"
  }, eventsTodayAndTmr.length ? eventsTodayAndTmr.map((e, i) => Event(e, i)) : noEvent());
}

TechSchedule.propTypes = propTypes;
TechSchedule.defaultProps = defaultProps;
export default TechSchedule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL1RlY2hTY2hlZHVsZS5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiUHJvcFR5cGVzIiwic2V0RGF5cyIsImdldEV2ZW50cyIsImdldERhdGUiLCJNSU5VVEUiLCJUZWNoU2NoZWR1bGVFdmVudCIsIkNhbGVuZGFyTm9FdmVudCIsInByb3BUeXBlcyIsInJhbmdlIiwibnVtYmVyIiwibGltaXQiLCJ0aW1lTWluIiwiaW5zdGFuY2VPZiIsIkRhdGUiLCJ0aW1lTWF4IiwiY2hpbGRyZW4iLCJhbnkiLCJub0V2ZW50IiwiZGVmYXVsdFByb3BzIiwidXBkYXRlVGltZSIsImFwaUtleSIsImNhbGVuZGFySUQiLCJUZWNoU2NoZWR1bGUiLCJwcm9wcyIsImV2ZW50cyIsInNldEV2ZW50cyIsInVwZGF0ZSIsInVwZGF0ZUZ1bmMiLCJ0aGVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIkV2ZW50IiwiZXZlbnRzVG9kYXlBbmRUbXIiLCJzbGljZSIsImxlbmd0aCIsIm1hcCIsImUiLCJpIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLElBQWVDLFNBQWYsRUFBMEJDLFFBQTFCLFFBQXlDLE9BQXpDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVFDLE9BQVIsRUFBaUJDLFNBQWpCLEVBQTRCQyxPQUE1QixFQUFxQ0MsTUFBckMsUUFBa0QsYUFBbEQ7QUFFQSxPQUFPLG9CQUFQO0FBQ0EsT0FBT0MsaUJBQVAsTUFBOEIscUJBQTlCO0FBQ0EsT0FBT0MsZUFBUCxNQUE0QixtQkFBNUI7QUFFQSxNQUFNQyxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLEtBQUssRUFBRVIsU0FBUyxDQUFDUyxNQUREO0FBRWhCQyxFQUFBQSxLQUFLLEVBQUVWLFNBQVMsQ0FBQ1MsTUFGRDtBQUdoQkUsRUFBQUEsT0FBTyxFQUFFWCxTQUFTLENBQUNZLFVBQVYsQ0FBcUJDLElBQXJCLENBSE87QUFJaEJDLEVBQUFBLE9BQU8sRUFBRWQsU0FBUyxDQUFDWSxVQUFWLENBQXFCQyxJQUFyQixDQUpPO0FBS2hCRSxFQUFBQSxRQUFRLEVBQUVmLFNBQVMsQ0FBQ2dCLEdBTEo7QUFNaEJDLEVBQUFBLE9BQU8sRUFBRWpCLFNBQVMsQ0FBQ2dCO0FBTkgsQ0FBbEI7QUFTQSxNQUFNRSxZQUFZLEdBQUc7QUFDbkJWLEVBQUFBLEtBQUssRUFBRSxDQURZO0FBRW5CRSxFQUFBQSxLQUFLLEVBQUUsQ0FBQyxDQUZXO0FBR25CQyxFQUFBQSxPQUFPLEVBQUVSLE9BQU8sQ0FBQyxDQUFELENBSEc7QUFJbkJXLEVBQUFBLE9BQU8sRUFBRVgsT0FBTyxDQUFDLEVBQUQsQ0FKRztBQUtuQmdCLEVBQUFBLFVBQVUsRUFBRWYsTUFBTSxHQUFHLEVBTEY7QUFNbkJnQixFQUFBQSxNQUFNLEVBQUUsSUFOVztBQU9uQkMsRUFBQUEsVUFBVSxFQUFFLElBUE87QUFRbkJKLEVBQUFBLE9BQU8sRUFBRTtBQVJVLENBQXJCOztBQVdBLFNBQVNLLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQzNCLFFBQU0sQ0FBQ0MsTUFBRCxFQUFTQyxTQUFULElBQXNCMUIsUUFBUSxDQUFDLEVBQUQsQ0FBcEM7QUFFQUQsRUFBQUEsU0FBUyxDQUFDLE1BQU07QUFDZCxRQUFJNEIsTUFBSjs7QUFDQSxVQUFNQyxVQUFVLEdBQUcsTUFBTTtBQUN2QnpCLE1BQUFBLFNBQVMsQ0FBQ3FCLEtBQUssQ0FBQ1osT0FBUCxFQUFnQlksS0FBSyxDQUFDVCxPQUF0QixFQUErQlMsS0FBSyxDQUFDRixVQUFyQyxFQUFpREUsS0FBSyxDQUFDSCxNQUF2RCxDQUFULENBQ0dRLElBREgsQ0FDUUosTUFBTSxJQUFJQyxTQUFTLENBQUNELE1BQUQsQ0FEM0I7QUFHQUUsTUFBQUEsTUFBTSxHQUFHRyxVQUFVLENBQUMsTUFBTTtBQUN4QkYsUUFBQUEsVUFBVTtBQUNYLE9BRmtCLEVBRWhCSixLQUFLLENBQUNKLFVBRlUsQ0FBbkI7QUFHRCxLQVBEOztBQVNBUSxJQUFBQSxVQUFVO0FBRVYsV0FBTyxNQUFNO0FBQ1hHLE1BQUFBLFlBQVksQ0FBQ0osTUFBRCxDQUFaO0FBQ0QsS0FGRDtBQUdELEdBaEJRLEVBZ0JOLENBQUNILEtBQUssQ0FBQ1osT0FBUCxFQUFnQlksS0FBSyxDQUFDVCxPQUF0QixFQUErQlMsS0FBSyxDQUFDSixVQUFyQyxFQUFpREksS0FBSyxDQUFDRixVQUF2RCxFQUFtRUUsS0FBSyxDQUFDSCxNQUF6RSxDQWhCTSxDQUFUO0FBa0JBLFFBQU1XLEtBQUssR0FBR1IsS0FBSyxDQUFDUixRQUFOLElBQWtCVixpQkFBaEM7QUFDQSxRQUFNWSxPQUFPLEdBQUdNLEtBQUssQ0FBQ04sT0FBTixJQUFpQlgsZUFBakM7QUFFQSxNQUFJMEIsaUJBQWlCLEdBQUcvQixPQUFPLENBQUN1QixNQUFELEVBQVNELEtBQUssQ0FBQ2YsS0FBZixDQUEvQjs7QUFDQSxNQUFJZSxLQUFLLENBQUNiLEtBQU4sSUFBZSxDQUFuQixFQUFzQjtBQUNwQnNCLElBQUFBLGlCQUFpQixHQUFHQSxpQkFBaUIsQ0FBQ0MsS0FBbEIsQ0FBd0IsQ0FBeEIsRUFBMkJWLEtBQUssQ0FBQ2IsS0FBakMsQ0FBcEI7QUFDRDs7QUFFRCxTQUNJO0FBQUssSUFBQSxTQUFTLEVBQUM7QUFBZixLQUNHc0IsaUJBQWlCLENBQUNFLE1BQWxCLEdBQTJCRixpQkFBaUIsQ0FBQ0csR0FBbEIsQ0FBc0IsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVOLEtBQUssQ0FBQ0ssQ0FBRCxFQUFJQyxDQUFKLENBQXJDLENBQTNCLEdBQTBFcEIsT0FBTyxFQURwRixDQURKO0FBS0Q7O0FBRURLLFlBQVksQ0FBQ2YsU0FBYixHQUF5QkEsU0FBekI7QUFDQWUsWUFBWSxDQUFDSixZQUFiLEdBQTRCQSxZQUE1QjtBQUVBLGVBQWVJLFlBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcbmltcG9ydCB7c2V0RGF5cywgZ2V0RXZlbnRzLCBnZXREYXRlLCBNSU5VVEV9IGZyb20gJy4vbGliL3V0aWxzJztcclxuXHJcbmltcG9ydCAnLi9UZWNoU2NoZWR1bGUuY3NzJztcclxuaW1wb3J0IFRlY2hTY2hlZHVsZUV2ZW50IGZyb20gJy4vVGVjaFNjaGVkdWxlRXZlbnQnO1xyXG5pbXBvcnQgQ2FsZW5kYXJOb0V2ZW50IGZyb20gJy4vQ2FsZW5kYXJOb0V2ZW50JztcclxuXHJcbmNvbnN0IHByb3BUeXBlcyA9IHtcclxuICByYW5nZTogUHJvcFR5cGVzLm51bWJlcixcclxuICBsaW1pdDogUHJvcFR5cGVzLm51bWJlcixcclxuICB0aW1lTWluOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcclxuICB0aW1lTWF4OiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcclxuICBub0V2ZW50OiBQcm9wVHlwZXMuYW55XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgcmFuZ2U6IDIsXHJcbiAgbGltaXQ6IC0xLFxyXG4gIHRpbWVNaW46IGdldERhdGUoMCksXHJcbiAgdGltZU1heDogZ2V0RGF0ZSgxNCksXHJcbiAgdXBkYXRlVGltZTogTUlOVVRFICogMTAsXHJcbiAgYXBpS2V5OiBudWxsLFxyXG4gIGNhbGVuZGFySUQ6IG51bGwsXHJcbiAgbm9FdmVudDogbnVsbFxyXG59O1xyXG5cclxuZnVuY3Rpb24gVGVjaFNjaGVkdWxlKHByb3BzKSB7XHJcbiAgY29uc3QgW2V2ZW50cywgc2V0RXZlbnRzXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGxldCB1cGRhdGU7XHJcbiAgICBjb25zdCB1cGRhdGVGdW5jID0gKCkgPT4ge1xyXG4gICAgICBnZXRFdmVudHMocHJvcHMudGltZU1pbiwgcHJvcHMudGltZU1heCwgcHJvcHMuY2FsZW5kYXJJRCwgcHJvcHMuYXBpS2V5KVxyXG4gICAgICAgIC50aGVuKGV2ZW50cyA9PiBzZXRFdmVudHMoZXZlbnRzKSk7XHJcblxyXG4gICAgICB1cGRhdGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB1cGRhdGVGdW5jKCk7XHJcbiAgICAgIH0sIHByb3BzLnVwZGF0ZVRpbWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB1cGRhdGVGdW5jKCk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHVwZGF0ZSk7XHJcbiAgICB9XHJcbiAgfSwgW3Byb3BzLnRpbWVNaW4sIHByb3BzLnRpbWVNYXgsIHByb3BzLnVwZGF0ZVRpbWUsIHByb3BzLmNhbGVuZGFySUQsIHByb3BzLmFwaUtleV0pO1xyXG5cclxuICBjb25zdCBFdmVudCA9IHByb3BzLmNoaWxkcmVuIHx8IFRlY2hTY2hlZHVsZUV2ZW50O1xyXG4gIGNvbnN0IG5vRXZlbnQgPSBwcm9wcy5ub0V2ZW50IHx8IENhbGVuZGFyTm9FdmVudDtcclxuXHJcbiAgbGV0IGV2ZW50c1RvZGF5QW5kVG1yID0gc2V0RGF5cyhldmVudHMsIHByb3BzLnJhbmdlKTtcclxuICBpZiAocHJvcHMubGltaXQgPj0gMCkge1xyXG4gICAgZXZlbnRzVG9kYXlBbmRUbXIgPSBldmVudHNUb2RheUFuZFRtci5zbGljZSgwLCBwcm9wcy5saW1pdCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nY2FsZW5kYXItZXZlbnRzJz5cclxuICAgICAgICB7ZXZlbnRzVG9kYXlBbmRUbXIubGVuZ3RoID8gZXZlbnRzVG9kYXlBbmRUbXIubWFwKChlLCBpKSA9PiBFdmVudChlLCBpKSkgOiBub0V2ZW50KCl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcblRlY2hTY2hlZHVsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XHJcblRlY2hTY2hlZHVsZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZWNoU2NoZWR1bGU7Il19